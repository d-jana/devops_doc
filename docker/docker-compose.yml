#set version of docker compose
version: '2.2'
#create service
services:
  #service name
  eureka:
    #container name
    container_name: eureka
    #set docker file path and file name
    build:
      #path
      context: ./eureka
      #filename
      dockerfile: Dockerfile
    #image name
    image: eureka:latest
    # The container will also always start on daemon startup
    restart: always

   # use syslog driver to manage log of container
   logging:
    driver: syslog
    options:
      # this is a syslog server address.
      # If we use elk stack then we use ip and port of logstash
      syslog-address: "tcp://172.17.0.1:5000"
     # This is the format of log. It is optional
     syslog-format: "rfc3164"
     # this is app-name which do identify of each container logs
     # here we use tag name as container name
     tag: "node-red‚Äù

    #set environment variable
    #Environment variable help you to set spring boot application.properties config at runtime
    #like - spring.cloud.config.uri: http://configserver:8888
    environment:
        SERVER_NAME: demoserver
    #set port on which run container
    ports:
    - "8761:8761"
    # to run a command in docker container
    command: use any command to run in docker container

    #Basically, links is no longer needed because its main purpose,to connect one cotainer with other. 
    #When containers are placed in the same network, they are reachable by each other using their container name and other alias as host
    links:
      - db

    #choose network
    networks:
      - microservice
  #-------------------------------------#
  # Don't use container_name,ports of a #
  # service which you can do scale up   #
  # and down                            #
  #-------------------------------------#
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    image: product:latest
    depends_on:
      - eureka
    networks:
      - microservice
      - mongodb
  zuul:
    build:
      context: ./zuul
      dockerfile: Dockerfile
    image: zuul:latest
    ports:
    - "8765:8765"
    depends_on:
      - eureka
    networks:
      - microservice
#create network
networks:
  #Here mongodb is pre pre-existing network.
  #If you want your containers to join a pre-existing network, use the external option
  mongodb:
    #it is use to join containers with pre-existing network
    external: true
    #this is the alias name of network
    name: mongodb
  #When we define a network without external it is custom network.
  #it created when service is created and removed automatically when service is removed
  microservice:
    name: microservice
